generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_CONNECTOR")
}

model User {
  idUser       String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  Professional Professional?
  Client       Client?
}

model Client {
  idClient         String        @id @default(uuid())
  idUser           String        @unique
  user             User          @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  Company          Company?      @relation(fields: [companyIdCompany], references: [idCompany])
  companyIdCompany String?
  Appointment      Appointment[]
}

model Professional {
  idProfessional String        @id @default(uuid())
  idUser         String        @unique
  idCompany      String
  company        Company       @relation(fields: [idCompany], references: [idCompany])
  user           User          @relation(fields: [idUser], references: [idUser])
  Appointment    Appointment[]
}

model Company {
  idCompany    String   @id @default(uuid())
  cnpj         String   @unique
  name         String
  creationDate DateTime
  timeUnit     Int
  openingTime  Int
  closingTime  Int

  // CompanyPreferences CompanyPreferences[]
  // CompanyService CompanyService[]
  Professionals Professional[]
  Client        Client[]
  Service       Service[]
}

// model CompanyPreferences {
//   idCompanyPreferences String @id @default(uuid())
//   idCompany            String
//   idPreferences        String
//   valor                String

//   company     Company     @relation(fields: [idCompany], references: [idCompany])
//   preferences Preferences @relation(fields: [idPreferences], references: [idPreferences])
// }

// model Preferences {
//   idPreferences      String               @id @default(uuid())
//   desc               String
//   CompanyPreferences CompanyPreferences[]
// }

model Service {
  idService   String        @id @default(uuid())
  idCompany   String
  name        String
  description String
  price       Float
  duration    Int
  appointment Appointment[]
  company     Company       @relation(fields: [idCompany], references: [idCompany])
}

model Appointment {
  idAppointment         String       @id @default(uuid())
  idClient              String
  idProfessional        String
  idService             String
  date                  DateTime
  approved              Boolean
  createdByProfessional Boolean
  client                Client       @relation(fields: [idClient], references: [idClient])
  professional          Professional @relation(fields: [idProfessional], references: [idProfessional])
  service               Service      @relation(fields: [idService], references: [idService])
}
